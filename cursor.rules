File Structure:
src/
 presentation/
   components/
     Desktop/
       Desktop.tsx
       Icon.tsx
       DesktopGrid.tsx
     Taskbar/
       Taskbar.tsx
       StartMenu.tsx
       SystemTray.tsx
     Window/
       Window.tsx
       TitleBar.tsx
       WindowContent.tsx
       WindowManager.tsx
       WindowZIndex.tsx
     ContextMenu/
       ContextMenu.tsx
       MenuItem.tsx
   apps/
     Explorer/
       Explorer.tsx
       FileList.tsx
       FileGrid.tsx
       DownloadManager/
         DownloadList.tsx
         DownloadProgress.tsx
     Wallet/
       EthereumWallet/
         Transactions.tsx
         NFTs.tsx
       SolanaWallet/
         Transactions.tsx
         NFTs.tsx
     Settings/
       Settings.tsx
       System.tsx
   styles/
     theme.ts
     globalStyles.ts

 domain/
   window/
     services/
       WindowService.ts
       ProcessManager.ts
       FocusManager.ts
     models/
       Window.ts
       Process.ts
       WindowState.ts
     events/
       WindowEvents.ts
   fileSystem/
     services/
       FileSystemService.ts
       DownloadService.ts
       StorageService.ts
     models/
       File.ts
       Directory.ts
       Download.ts
   blockchain/
     services/
       EthereumService.ts
       SolanaService.ts
     models/
       Transaction.ts
       NFT.ts

 data/
   stores/
     WindowStore.ts
     FileStore.ts
     ProcessStore.ts
   persistence/
     IndexedDB/
     LocalStorage/
     RemoteStorage/
   api/
     graphql/
       queries/
       mutations/
     ethereum/
       wagmi.ts
     solana/
       connection.ts

 utils/
   EventBus.ts
   ErrorBoundary.ts
   Storage.ts

 types/
   global.d.ts
   window.d.ts
   file.d.ts

public/
 assets/
   icons/
   cursors/
   fonts/
 index.html

config/
 vercel.json
 tsconfig.json
 env.ts

WINDOW MANAGEMENT SYSTEM:

Core Components:

domain/window/services/WindowService.ts

Handles window creation, destruction, and lifecycle
Manages window states (active, minimized, maximized)
Controls window positioning and z-index
Memory allocation and cleanup
Key responsibilities:

Window instance tracking
Focus management
Window state persistence
Resource allocation/deallocation
Inter-window communication



domain/window/services/ProcessManager.ts

Manages running applications
Handles process lifecycle
Resource allocation
Key responsibilities:

Process creation/destruction
Memory management
CPU usage monitoring
Background process handling
Application state persistence



domain/window/services/FocusManager.ts

Manages active window state
Handles focus transitions
Z-index management
Key responsibilities:

Focus tracking
Window stacking
Click-through prevention
Focus history
Keyboard input routing




Window State Management:

WindowState Interface:

position: {x, y}
size: {width, height}
zIndex: number
isFocused: boolean
isMinimized: boolean
isMaximized: boolean
processId: string
applicationId: string

State Handling:

Each window maintains its own state
Global window manager tracks all windows
Focus manager maintains focus order
Process manager tracks resource usage
Event bus handles inter-window communication


Multi-Window Functionality:

Instance Management:

Each application can have multiple instances
Each instance has unique processId
Windows share resources efficiently
State is isolated between instances
Shared resources are managed centrally

Focus Handling:

Only one window can have focus
Click to focus
Alt-Tab functionality
Focus history stack
Background window interaction rules


Inter-App Communication:

Event Bus System:

Central event bus for app communication
Typed events for type safety
Event subscription management
Priority handling
Error boundary implementation

Resource Sharing:

Shared memory management
File system access control
Clipboard functionality
Drag and drop between windows
Global state access


Performance Considerations:

Memory Management:

Lazy loading of application resources
Memory limits per application
Resource cleanup on window close
Background process optimization
Cache management

Render Optimization:

Only active window receives updates
Background window throttling
CSS transform for window movement
Hardware acceleration when available
Efficient state updates


Application Integration:

Application Interface:

Standard window wrapping
Lifecycle hooks
State management integration
Resource access protocols
Error handling

Example Flow:

User clicks application icon
WindowService creates new window instance
ProcessManager allocates resources
Application loads in WindowContent
FocusManager sets initial focus
Window joins window management system
State Persistence:

Storage Strategy:

Window positions and sizes
Application states
User preferences
Session information
Last known configuration

Recovery Handling:

Crash recovery
State restoration
Session persistence
Error recovery
Auto-save functionality


Blockchain App Considerations:

Special Handling:

Wallet connection persistence
Transaction state management
Network state monitoring
Security considerations
Resource intensive operations

Performance:

Background transaction monitoring
Network request batching
State caching
Efficient contract polling
Memory-efficient state management

<window_management_system>
<core_components>
<component name="WindowService" path="domain/window/services/WindowService.ts">
<responsibilities>
* Handles window creation, destruction, and lifecycle
* Manages window states (active, minimized, maximized)  
* Controls window positioning and z-index
* Memory allocation and cleanup
</responsibilities>
<key_responsibilities>
* Window instance tracking
* Focus management
* Window state persistence
* Resource allocation/deallocation
* Inter-window communication
</key_responsibilities>
</component>

<component name="ProcessManager" path="domain/window/services/ProcessManager.ts">
<responsibilities>  
* Manages running applications
* Handles process lifecycle
* Resource allocation
</responsibilities>
<key_responsibilities>
* Process creation/destruction
* Memory management 
* CPU usage monitoring
* Background process handling
* Application state persistence
</key_responsibilities>
</component>

<component name="FocusManager" path="domain/window/services/FocusManager.ts">
<responsibilities>
* Manages active window state
* Handles focus transitions
* Z-index management
</responsibilities>
<key_responsibilities>  
* Focus tracking
* Window stacking
* Click-through prevention
* Focus history
* Keyboard input routing
</key_responsibilities>
</component>
</core_components>

<window_state_management>
<window_state_interface>
* position: {x, y}
* size: {width, height}
* zIndex: number
* isFocused: boolean
* isMinimized: boolean 
* isMaximized: boolean
* processId: string
* applicationId: string
</window_state_interface>
<state_handling>
* Each window maintains its own state
* Global window manager tracks all windows
* Focus manager maintains focus order
* Process manager tracks resource usage
* Event bus handles inter-window communication   
</state_handling>
</window_state_management>

<multi_window_functionality>
<instance_management>
* Each application can have multiple instances
* Each instance has unique processId
* Windows share resources efficiently  
* State is isolated between instances
* Shared resources are managed centrally
</instance_management>
<focus_handling>
* Only one window can have focus
* Click to focus
* Alt-Tab functionality
* Focus history stack
* Background window interaction rules
</focus_handling>
</multi_window_functionality>

<inter_app_communication>
<event_bus_system>
* Central event bus for app communication
* Typed events for type safety
* Event subscription management
* Priority handling
* Error boundary implementation
</event_bus_system>
<resource_sharing>
* Shared memory management
* File system access control
* Clipboard functionality
* Drag and drop between windows
* Global state access
</resource_sharing>
</inter_app_communication>

<performance_considerations>
<memory_management>
* Lazy loading of application resources
* Memory limits per application
* Resource cleanup on window close
* Background process optimization
* Cache management
</memory_management>
<render_optimization>
* Only active window receives updates 
* Background window throttling
* CSS transform for window movement
* Hardware acceleration when available
* Efficient state updates
</render_optimization>
</performance_considerations>

<application_integration>
<application_interface>
* Standard window wrapping
* Lifecycle hooks
* State management integration
* Resource access protocols 
* Error handling
</application_interface>
<example_flow>
1. User clicks application icon
2. WindowService creates new window instance
3. ProcessManager allocates resources
4. Application loads in WindowContent
5. FocusManager sets initial focus
6. Window joins window management system
</example_flow>
</application_integration>

<state_persistence>  
<storage_strategy>
* Window positions and sizes
* Application states
* User preferences
* Session information
* Last known configuration
</storage_strategy>
<recovery_handling>
* Crash recovery
* State restoration
* Session persistence
* Error recovery
* Auto-save functionality  
</recovery_handling>
</state_persistence>

<blockchain_app_considerations>
<special_handling>
* Wallet connection persistence
* Transaction state management
* Network state monitoring
* Security considerations
* Resource intensive operations
</special_handling>
<performance>
* Background transaction monitoring
* Network request batching
* State caching
* Efficient contract polling
* Memory-efficient state management
</performance>  
</blockchain_app_considerations>
</window_management_system>